# Generated by Django 5.1 on 2025-06-05 13:26

import apps.core.mixins.save
import apps.core.models.abstracts
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("fin", "0003_alter_tax_options_alter_taxbracket_options_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="tax",
            name="round_method",
            field=models.CharField(
                choices=[("round", "Normal"), ("floor", "Down"), ("ceil", "Up")],
                default="ceil",
                max_length=10,
                verbose_name="round method",
            ),
        ),
        migrations.CreateModel(
            name="Compensation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                limit_value=4,
                                message="the field must be at least 4 characters long.",
                            )
                        ],
                        verbose_name="name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, default="", null=True, verbose_name="description"
                    ),
                ),
                ("ordering", models.PositiveIntegerField(default=0)),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        blank=True,
                        default=None,
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "calculation_method",
                    models.CharField(
                        choices=[
                            ("fixed", "Fixed"),
                            ("by_input", "By Input"),
                            ("formula", "Formula"),
                        ],
                        default="by_input",
                        max_length=10,
                        verbose_name="calculation method",
                    ),
                ),
                (
                    "tax_classification",
                    models.CharField(
                        choices=[
                            ("salary", "Salary"),
                            (
                                "withholding_tax_applicable",
                                "Withholding Tax Applicable",
                            ),
                            (
                                "withholding_tax_not_applicable",
                                "Withholding Tax Not Applicable",
                            ),
                            ("others", "Others"),
                        ],
                        default="withholding_tax_applicable",
                        help_text="classify the nature of compensation to know how to calculate it in the periodic tax statement",
                        max_length=255,
                        verbose_name="tax classification",
                    ),
                ),
                (
                    "round_method",
                    models.CharField(
                        choices=[
                            ("round", "Normal"),
                            ("floor", "Down"),
                            ("ceil", "Up"),
                        ],
                        default="ceil",
                        max_length=10,
                        verbose_name="round method",
                    ),
                ),
                (
                    "rounded_to",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="rounded to",
                    ),
                ),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=4, default=0, max_digits=20, verbose_name="value"
                    ),
                ),
                (
                    "affected_by_working_days",
                    models.BooleanField(
                        default=False,
                        help_text="whether compensation value is affected by working days",
                        verbose_name="affected by working days",
                    ),
                ),
                (
                    "formula",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="formula to calculate compensation value",
                        verbose_name="formula",
                    ),
                ),
                (
                    "tax",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="compensations",
                        to="fin.tax",
                        verbose_name="tax",
                    ),
                ),
            ],
            options={
                "verbose_name": "Compensation",
                "verbose_name_plural": "Compensations",
                "ordering": ("name",),
                "permissions": (
                    ("export_compensation", "Can export compensation"),
                    ("view_activity_compensation", "Can view compensation activity"),
                ),
            },
            bases=(
                apps.core.mixins.save.AddCreateActivityMixin,
                apps.core.models.abstracts.UrlsMixin,
                models.Model,
            ),
        ),
    ]
